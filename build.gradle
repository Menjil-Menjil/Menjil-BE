plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco' // add jacoco plugin
    id 'com.google.osdetector' version "1.7.1" // https://github.com/netty/netty/issues/11020
    id "org.asciidoctor.jvm.convert" version "3.3.2" // RestDocs
}

jar {
    enabled = false
}

group = 'seoultech.capstone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt // RestDocs
}

repositories {
    mavenCentral()
}

dependencies {
    if (osdetector.classifier == "osx-aarch_64") {
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.77.Final:${osdetector.classifier}")
    }

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // parse json
    implementation 'com.google.code.gson:gson:2.9.0'

    // Security and OAuth
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // chat-bot
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'

    // AWS
//    implementation platform('software.amazon.awssdk:bom:2.20.56') // 파일의 종속성 섹션에 BOM (재료 명세서) 을 추가합니다.
//    implementation 'software.amazon.awssdk:s3' // 종속성 섹션에 사용할 SDK 모듈을 지정합니다(S3).
    implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws', version: '2.4.2'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // RestDocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // WireMock
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"
    testImplementation "org.assertj:assertj-core:3.24.2"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

/* start RestDocs */
ext { // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { // 특정 파일만 html로 만든다.
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}
/* end RestDocs */

/* jacoco start */
jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        // To use codecov, enable xml.
        // reference link: https://docs.codecov.com/docs/supported-report-formats
        xml.required.set(true)
        csv.required.set(false)

        // path where result is saved
        html.destination file("jacoco/")
    }

    // Ignore classes: Application, DTO, Config, etc
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "seoultech/capstone/menjil/**/*jilApplication*",
                    "seoultech/capstone/menjil/**/*Dto*",
                    "seoultech/capstone/menjil/**/*Request*",
                    "seoultech/capstone/menjil/**/*Response*",
                    "seoultech/capstone/menjil/domain/**/domain/**",
                    "seoultech/capstone/menjil/domain/chat/dto/**",
                    "seoultech/capstone/menjil/global/filter/*CustomCors*",
                    "**/*Config*",
                    "**/*Exception*"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.05
            }
            excludes = [
                    "**.*jilApplication*",
                    "**.*Dto*",
                    "**.*Request*",
                    "**.*Response*",
                    "**/domain/**/domain/**",
                    "**/domain/chat/dto/**",
                    "**.*Config*",
                    "**.*CustomCors*",
                    "**.*Exception*"
            ]
        }

        rule {
            enabled = false
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }
        }

    }
}
/* jacoco end */

mainClassName = 'seoultech.capstone.menjil.MenjilApplication'