plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(false)
        csv.required.set(false)

        // path where result is saved
        html.destination file("jacoco/")
    }

    // Ignore classes: Application, DTO, Config, etc
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "seoultech/capstone/menjil/**/*Application*",
                    "seoultech/capstone/menjil/**/*Dto*",
                    "seoultech/capstone/menjil/**/*Request*",
                    "seoultech/capstone/menjil/**/*Response*",
//                    "seoultech/capstone/menjil/chat/dto/Message*",
                    "**/*Config*",
                    "**/*Exception*",
                    "**/TokenTestController*"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true

            limit {
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
            excludes = [
                    "**.*Application*",
                    "**.*Dto*",
                    "**.*Request*",
                    "**.*Response*",
                    "**.*Config*",
                    "**.*Exception*",
                    "**.TokenTestController*"
            ]
        }

        rule {
            enabled = false
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.20
            }

        }
    }
}

jar {
    enabled = false
}

group = 'seoultech.capstone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // parse json
    implementation 'com.google.code.gson:gson:2.9.0'

    // Security and OAuth
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // chat-bot
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

mainClassName = 'seoultech.capstone.menjil.MenjilApplication'