name: Java CI with Gradle, CD with Docker Hub and AWS EC2 in main branch

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # workflow 실행 전 기본적으로 checkout 필요
      # 최신 버전은 v3
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin' # jdk를 제공하는 vender사 이름 ex. zulu, adopt, microsoft

      ## Create secret yml and properties files
      - name: create application-database.yml
        shell: bash
        run: |
          touch ./src/main/resources/application-database.yml 
          echo "${{secrets.APPLICATION_DATABASE}}" > ./src/main/resources/application-database.yml

      - name: create application-security.yml
        shell: bash
        run: |
          touch ./src/main/resources/application-security.yml 
          echo "${{secrets.APPLICATION_SECURITY}}" > ./src/main/resources/application-security.yml

      - name: create application-jwt.properties
        shell: bash
        run: |
          touch ./src/main/resources/application-jwt.properties
          echo "${{secrets.APPLICATION_JWT_PROPERTIES}}" > ./src/main/resources/application-jwt.properties

      - name: create application-database-test.yml
        shell: bash
        run: |
          touch ./src/test/resources/application-database-test.yml 
          echo "${{secrets.APPLICATION_DATABASE_TEST}}" > ./src/test/resources/application-database-test.yml

      ## Gradle
      - name: Cache gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      ## Docker
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_REPO_DEV }}:latest

  deploy:
    needs: build  # build 이후에 실행되도록 설정
    runs-on: ubuntu-latest
    steps:
      - name: Get Github Action's ip address
        id: ip
        uses: haythem/public-ip@v1.3
        
      # access-key-id, secret-access-key의 경우 AWS IAM User의 정보 사용
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add Github Action's ip address to Security Group
        run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: connect EC2 instance and deploy docker images to Dev server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST_IP }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          # port: ${{ secrets.AWS_SSH_PORT }} # 생략하면 default 22

          # kill container -> remove container -> remove image -> pull new image -> run
          script: |
            sudo docker kill ${{ secrets.PROJECT_NAME }}  
            sudo docker rm ${{ secrets.PROJECT_NAME }} 
            sudo docker rmi ${{ secrets.DOCKERHUB_REPO_DEV }}

            sudo docker pull ${{ secrets.DOCKERHUB_REPO_DEV }}:latest
            sudo docker run -d --name ${{ secrets.PROJECT_NAME }} -p ${{ secrets.APPLICATION_PORT }}:8080 ${{ secrets.DOCKERHUB_REPO_DEV }}:latest

      - name: Remove Github Action's ip address from Security Group
        run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
