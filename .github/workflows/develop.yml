name: Java CI/CD with Gradle in develop branch

on:
  push:
    branches: ["develop"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' 
        
    ## Create secret yml files
    - name: make empty application-database.yml
      shell: bash
      run: |
        touch ./src/main/resources/application-database.yml 
        echo "${{secrets.APPLICATION_DATABASE}}" > ./src/main/resources/application-database.yml

    - name: make application-security.yml
      shell: bash
      run: |
        touch ./src/main/resources/application-security.yml 
        echo "${{secrets.APPLICATION_SECURITY_DEV}}" > ./src/main/resources/application-security.yml

    - name: make application-jwt.properties
      shell: bash
      run: |
        touch ./src/main/resources/application-jwt.properties
        echo "${{secrets.APPLICATION_JWT_PROPERTIES}}" > ./src/main/resources/application-jwt.properties

    - name: make application-database-test.yml
      shell: bash
      run: |
        touch ./src/test/resources/application-database-test.yml 
        echo "${{secrets.APPLICATION_TEST}}" > ./src/test/resources/application-database-test.yml

    ## Gradle
    - name: Cache gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Build with Gradle
      run : ./gradlew clean build

    ## Docker
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ secrets.DOCKERHUB_REPO_DEV }}:latest

  deploy:
    needs: build  # build 이후에 실행되도록 설정
    runs-on: ubuntu-latest
    steps:
      - name: connect EC2 instance and deploy docker images to Dev server
        uses: appleboy/ssh-action@v0.1.10
        with: 
          host: ${{ secrets.AWS_EC2_HOST_IP_DEV }}
          username: ${{ secrets.AWS_EC2_USERNAME_DEV }}
          key: ${{ secrets.AWS_SSH_KEY }}
          # port: ${{ secrets.AWS_SSH_PORT }} # 생략하면 default 22

          # kill container -> remove container -> remove image -> pull new image -> run
          script: |
            sudo docker kill ${{ secrets.PROJECT_NAME }}  
            sudo docker rm ${{ secrets.PROJECT_NAME }} 
            sudo docker rmi ${{ secrets.DOCKERHUB_REPO_DEV }}

            sudo docker pull ${{ secrets.DOCKERHUB_REPO_DEV }}:latest
            sudo docker run -d --name ${{ secrets.PROJECT_NAME }} -p ${{ secrets.APPLICATION_PORT_DEV }}:${{ secrets.APPLICATION_PORT }} ${{ secrets.DOCKERHUB_REPO_DEV }}:latest
